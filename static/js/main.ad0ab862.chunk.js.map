{"version":3,"sources":["serviceWorker.js","components/IdleContainer.js","App.js","Login.js","routes.js","index.js"],"names":["Boolean","window","location","hostname","match","IdleTimerContainer","children","useState","setIsLoggedIn","modalIsOpen","setModalIsOpen","idleTimerRef","useRef","sessionTimeoutRef","history","useHistory","Modal","setAppElement","handleLogout","console","log","push","clearTimeout","current","isOpen","onClick","ref","timeout","onIdle","setTimeout","App","Login","className","type","placeholder","value","to","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCmCSC,MAhDf,YAA2C,IAAbC,EAAY,EAAZA,SAAY,EACJC,oBAAS,GADL,mBACrBC,GADqB,aAEFD,oBAAS,GAFP,mBAEjCE,EAFiC,KAEpBC,EAFoB,KAGlCC,EAAeC,iBAAO,MACtBC,EAAoBD,iBAAO,MAC3BE,EAAUC,cAEhBC,IAAMC,cAAc,SAEpB,IAMMC,EAAe,WACnBC,QAAQC,IAAI,wBACZZ,GAAc,GACdE,GAAe,GACfI,EAAQO,KAAK,KACbC,aAAaT,EAAkBU,UASjC,OACE,6BACE,kBAAC,IAAD,CAAOC,OAAQf,GACb,2EAEE,wDAEF,6BACE,4BAAQgB,QAASP,GAAjB,kBACA,4BAAQO,QAfG,WACjBN,QAAQC,IAAI,kBACZV,GAAe,GACfY,aAAaT,EAAkBU,WAYzB,8BAGJ,kBAAC,IAAD,CAAWG,IAAKf,EAAcgB,QAAS,IAAUC,OAhCtC,WACbT,QAAQC,IAAI,kBACZV,GAAe,GACfG,EAAkBU,QAAUM,WAAWX,EAAc,OA8BhDZ,KC/BMwB,EAbH,WACV,OACE,6BACE,kBAAC,EAAD,KACE,kGAGA,mECOOC,EAdD,WACZ,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,cACd,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,MAAM,kBAChD,2BAAOF,KAAK,WAAWC,YAAY,WAAWC,MAAM,YACpD,kBAAC,IAAD,CAAMC,GAAG,QAAT,aCMKC,EAXA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,OAAOC,UAAWV,OCJtCW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.ad0ab862.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Modal from \"react-modal\";\nimport IdleTimer from \"react-idle-timer\";\n\nfunction IdleTimerContainer({ children }) {\n  const [isLoggedIn, setIsLoggedIn] = useState(true);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const idleTimerRef = useRef(null);\n  const sessionTimeoutRef = useRef(null);\n  const history = useHistory();\n\n  Modal.setAppElement(\"#root\");\n\n  const onIdle = () => {\n    console.log(\"User is idle !\");\n    setModalIsOpen(true);\n    sessionTimeoutRef.current = setTimeout(handleLogout, 5000);\n  };\n\n  const handleLogout = () => {\n    console.log(\"User is logged out !\");\n    setIsLoggedIn(false);\n    setModalIsOpen(false);\n    history.push(\"/\");\n    clearTimeout(sessionTimeoutRef.current);\n  };\n\n  const handleKeep = () => {\n    console.log(\"User is keep !\");\n    setModalIsOpen(false);\n    clearTimeout(sessionTimeoutRef.current);\n  };\n\n  return (\n    <div>\n      <Modal isOpen={modalIsOpen}>\n        <h2>\n          Anda sudah menganggur untuk sementara waktu,\n          <p>Anda akan segera keluar.</p>\n        </h2>\n        <div>\n          <button onClick={handleLogout}>Keluarkan saya</button>\n          <button onClick={handleKeep}>Biarkan saya tetap masuk</button>\n        </div>\n      </Modal>\n      <IdleTimer ref={idleTimerRef} timeout={5 * 1000} onIdle={onIdle}>\n        {children}\n      </IdleTimer>\n    </div>\n  );\n}\n\nexport default IdleTimerContainer;\n","import React from \"react\";\nimport IdleTimerContainer from \"./components/IdleContainer\";\n\nconst App = () => {\n  return (\n    <div>\n      <IdleTimerContainer>\n        <h2>\n          Welcome user , to cek user activity .. please check is console ...\n        </h2>\n        <p>detect active after 5 second idle</p>\n      </IdleTimerContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Login = () => {\n  return (\n    <div className=\"login-page\">\n      <div className=\"form\">\n        <form className=\"login-form\">\n          <input type=\"text\" placeholder=\"username\" value=\"tes@gmail.com\" />\n          <input type=\"password\" placeholder=\"password\" value=\"1234567\" />\n          <Link to=\"/app\">Login</Link>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport Login from \"./Login\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/app\" component={App} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}